#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper. 
# GNU copyright 1997 by Joey Hess.
#
# This version is for a hypothetical package that can build a kernel modules
# architecture-dependant package via make-kpkg, as well as an
# architecture-independent module source package, and other packages
# either dep/indep for things like common files or userspace components
# needed for the kernel modules.

# Uncomment this to turn on verbose mode. 
#export DH_VERBOSE=1

# dpkg stamps directory
STAMPS_DIR = debian/stamps

DPKG_EXPORT_BUILDFLAGS = 1
include /usr/share/dpkg/buildflags.mk

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
DEB_BUILD_ARCH      = $(shell dpkg-architecture -qDEB_BUILD_ARCH | \
			sed -e s/powerpcspe/ppc/ -e s/powerpc/ppc/)
HOST_CPU            = $(shell dpkg-architecture -qDEB_HOST_ARCH | \
			sed -e s/powerpcspe/ppc/ -e s/powerpc/ppc/ \
			-e s/amd64/x86/ -e s/i.86/x86/ -e s/armel/arm/)

ifeq ($(HOST_CPU),arm)
CFLAGS += -march=armv6
endif

# RTAIs own prefix handling
RTAI_PREFIX=/usr/lib/realtime

### KERNEL SETUP
### Setup the stuff needed for making kernel module packages
### taken from /usr/share/kernel-package/sample.module.rules

# Name of package
package		= rtai
# KSRC is the location of the kernel source. This default value points
# to a dummy linux tree in the package directory, sufficient to run
# './configure'.  When make-kpkg is used it will supply to real value
ifndef KSRC
KSRC		= $(CURDIR)/debian/linux
DUMMY_KCONFIG	= debian/linux/.config
CONFIGURE_ARGS	= --enable-doc --enable-dbx
else
# Comedi build is broken in magma
#CONFIGURE_ARGS	= --enable-comedi-lxrt --enable-comedi-lock
CONFIGURE_ARGS	= 
endif
# KDREV is the package-revision, as given to make-kpkg by the user.
# Just put a simply default value in here which we use when we test
# the packagebuilding without make-kpkg
ifeq ($(strip $(KDREV)),)
KDREV		= "test1.0"
endif

# These override '/usr/realtime' and '/usr/src/linux', respectively,
# in the rtai .config
CFLAGS += -DCONFIG_RTAI_INSTALLDIR="$(RTAI_PREFIX)" \
	-DCONFIG_RTAI_LINUXDIR="$(KSRC)"

## Now to determine the kernel version, normally supplied by make-kpkg
ifeq ($(strip $(KVERS)),)
# Now we need to get the kernel-version somehow (we are not running
# under make-kpkg?)
ifeq ($(strip $(KSRC)),)
$(error Error. I do not know how to determine the kernel version)
else
kversion :=$(shell egrep '^VERSION +=' $(KSRC)/Makefile 2>/dev/null | \
                 sed -e 's/[^0-9]*\([0-9]*\)/\1/')
kplevel  :=$(shell egrep '^PATCHLEVEL +=' $(KSRC)/Makefile 2>/dev/null | \
                    sed -e 's/[^0-9]*\([0-9]*\)/\1/')
ksublevel:=$(shell egrep '^SUBLEVEL +=' $(KSRC)/Makefile 2>/dev/null | \
                  sed -e 's/[^0-9]*\([0-9]*\)/\1/')
EXTRA_VERSION:=$(shell egrep '^EXTRAVERSION +=' $(KSRC)/Makefile 2>/dev/null | \
                 sed -e 's/EXTRAVERSION[\t ]*=[\t ]*\(.*\)/\1/')
kextra:=$(strip $(EXTRA_VERSION))
HAVE_NEW_MODLIB:=$(shell egrep '\(INSTALL_MOD_PATH\)' \
                            $(KSRC)/Makefile 2>/dev/null )

# If you want to have more than one kernel configuration per kernel
# version, set FLAVOUR in the top level kernel Makefile *before*
# invoking make-kpkg -- it will be appended to UTS_RELEASE in
# version.h (separated by a hyphen). This affects everything -- the
# names and versions of the image, source, headers, and doc packages,
# and where the modules are searched for in /lib/modules.

ifdef FLAVOUR
# uhm - should check if we really have a Makefile capable of Flavours?
endif

FLAVOUR:=$(shell grep ^FLAVOUR $(KSRC)/Makefile 2>/dev/null | \
                  perl -ple 's/FLAVOUR[\s:=]+//g')

ifneq ($(strip $(FLAVOUR)),)
INT_FLAV := -$(FLAVOUR)
FLAV_ARG := FLAVOUR=$(FLAVOUR)
else
INT_FLAV :=
FLAV_ARG :=
endif

## This is the replacement for FLAVOUR
ifneq ($(strip $(APPEND_TO_VERSION)),)
iatv := $(strip $(APPEND_TO_VERSION))
EXTRAV_ARG := EXTRAVERSION=${EXTRA_VERSION}${iatv}
else
iatv :=
EXTRAV_ARG :=
endif

KVERS = $(kversion).$(kplevel).$(ksublevel)$(kextra)$(iatv)$(INT_FLAV)

endif
endif

non_epoch_version=$(shell echo $(KVERS) | perl -pe 's/^\d+://')
epoch=$(shell echo $(KVERS) | perl -ne 'm/^(\d+:)/ && print $$1')

# We also need the package version
pversion	= $(shell sed -ne '1s/.*\((.*)\).*/\1/' debian/changelog)
pversion	= $(shell sed -ne '1s/.*(\(.*\)).*/\1/p' debian/changelog)

# KDIST_DEST_DIR is the place where the final .deb package should be made. This is the
# default value, when make-kpkg is used it will supply to real value
KDIST_DEST_DIR		= ..

pmodules = $(package)-modules-$(non_epoch_version)
psource = $(package)-source

pmoddir = debian/$(psource)/usr/src/modules/$(package)

# try to support all of RTAIs configuring interfaces
CONFIG_TARGET_IF=cli
ifeq ($(CONFIG_TARGET),menuconfig)
CONFIG_TARGET_IF=gui
endif
ifeq ($(CONFIG_TARGET),gconfig)
CONFIG_TARGET_IF=gui
endif
ifeq ($(CONFIG_TARGET),xconfig)
CONFIG_TARGET_IF=gui
endif

### end  KERNEL SETUP

ifeq ($(shell echo $(DEB_HOST_GNU_TYPE) | cut -d- -f1),powerpc)
CONFIG_OPTION=CONFIG_PPC
else ifeq ($(shell echo $(DEB_HOST_GNU_TYPE) | cut -d- -f1),arm)
CONFIG_OPTION=CONFIG_ARM
else ifeq ($(shell echo $(DEB_HOST_GNU_TYPE) | cut -d- -f1),x86_64)
CONFIG_OPTION=CONFIG_X86_64
else
CONFIG_OPTION=CONFIG_X86_32
endif

configure:
	dh_testdir
	autoreconf -v --install

debian/linux/.config:
#	# Set up dummy linux source tree
	dh_testdir
	mkdir -p debian/linux/include/linux
	cp debian/linux_dummy_Makefile debian/linux/Makefile
	cp debian/linux_dummy_ipipe.h debian/linux/include/linux/ipipe.h
#	# put CONFIG_X86_(32|64|ARM|PPC) into dummy .config
	sed -e "s,^CONFIG_X86_X=,$(CONFIG_OPTION)=," \
	    debian/linux_dummy_.config > debian/linux/.config
	test "$(CONFIG_OPTION)" != CONFIG_ARM || \
	    echo "CONFIG_ARCH_PXA=y" >> debian/linux/.config

config.status: configure $(DUMMY_KCONFIG)
	CFLAGS="$(CFLAGS)" \
	    ./configure \
	    --host=$(DEB_HOST_GNU_TYPE) \
	    --build=$(DEB_BUILD_GNU_TYPE) \
	    --prefix=/usr \
	    --mandir=\$${prefix}/share/man --infodir=\$${prefix}/share/info \
	    --includedir=\$${prefix}/include/rtai \
	    --with-linux-dir=$(KSRC) \
	    --with-module-dir=/lib/modules/$(KVERS)/rtai \
	    --disable-leds  --disable-rtailab \
	    --enable-fpu --enable-rtdm \
	    $(CONFIGURE_ARGS)
	touch $@

build-arch: $(STAMPS_DIR)/build-arch
$(STAMPS_DIR)/build-arch:  config.status
	dh_testdir
	$(MAKE) -C base/sched/liblxrt CFLAGS="$(CFLAGS)"
	$(MAKE) -C base/scripts
	$(MAKE) -C doc/doxygen
	mkdir -p $(dir $@) && touch $@

build-indep: config.status  $(STAMPS_DIR)/build-indep
$(STAMPS_DIR)/build-indep:
	dh_testdir
	mkdir -p $(dir $@) && touch $@

build: build-arch build-indep

clean:
	dh_testdir
	dh_testroot

	rm -rf $(STAMPS_DIR) \
		debian/rtai-source.tar.bz2 \
		debian/linux/.config

	test ! -f config.status || \
		$(MAKE) distclean
	dh_clean

install: DH_OPTIONS=
install: build
	dh_testdir
	dh_testroot
	dh_prep
	dh_installdirs

#	# librtai-dev
	$(MAKE) -C base/sched/liblxrt install \
	    DESTDIR=$(CURDIR)/debian/librtai-dev
	dh_install -plibrtai-dev --sourcedir=. base/scripts/rtai-config usr/bin
	cat base/ipc/shm/rtai_shm.udev base/ipc/shm/rtai_shm.udev > \
	    debian/librtai-dev.udev
	dh_installudev -plibrtai-dev

#	# librtai1
	mkdir -p $(CURDIR)/debian/librtai1/usr/lib
	mv $(CURDIR)/debian/librtai-dev/usr/lib/liblxrt.so.* \
	    $(CURDIR)/debian/librtai1/usr/lib
	$(MAKE) -C base/include install DESTDIR=$(CURDIR)/debian/librtai-dev
#	# Install the RTAI isolcpus= grub.d entry
	cp debian/grub.d_rtai 09_rtai
	dh_install -plibrtai1 09_rtai etc/grub.d

#	# python-rtai
	$(MAKE) -C rtai-py install pythondir=/usr/share/pyshared \
	    DESTDIR=$(CURDIR)/debian/python-rtai
	chmod a-x $(CURDIR)/debian/python-rtai/usr/share/pyshared/*.py

#	# rtai-source
#	#
#	# Prepare the usr/src/modules/$(package) directory, which will
#	# be packed into the rtai-source tarball
#	#
#	# Create the directories to install the source into
	mkdir -p $(pmoddir)/debian
#	#
#	# Copy only the driver source to the proper location
	cp -a  \
		ChangeLog README.INSTALL \
		aclocal.m4 configure configure.ac bin \
		GNUmakefile.am GNUmakefile.in GNUmakefile \
		rtai_config.h.in \
		addons base testsuite rtai-lab rtai-py \
		$(pmoddir)
#	# Copy the needed debian/ pieces to the proper location
	cp debian/control.modules.in \
	    $(pmoddir)/debian/control.in
	cp debian/rules debian/compat debian/changelog debian/copyright \
	    $(pmoddir)/debian
#	# Build the rtai-source tarball
	tar cjf debian/rtai-source/usr/src/rtai-source.tar.bz2 \
	    --directory debian/$(psource)/usr/src modules
	rm -rf debian/$(psource)/usr/src/modules
#	#
#	# Patch collection
	find base/arch -name 'hal-linux-*.patch' | \
	    xargs -I XXX cp XXX \
		debian/rtai-source/usr/src/kernel-patches/diffs/rtai/

# Build architecture-independent files here.
# Pass -i to all debhelper commands in this target to reduce clutter.
binary-indep: build install
	dh_testdir -i
	dh_testroot -i
	dh_installchangelogs ChangeLog -i
	dh_installdocs -i
	dh_installexamples -i
	dh_install -i
	dh_python2 -i
	dh_installman -i
	dh_lintian -i
	dh_link -i
	dh_compress -i -X.pdf 
	dh_fixperms -i
	dh_installdeb -i
	dh_shlibdeps -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i

# Build architecture-dependent files here.
binary-arch: build install
	dh_testdir -s
	dh_testroot -s
	dh_installdocs -s
	dh_installexamples -s
	dh_install -s
	dh_installmenu -s
	dh_python2 -s
	dh_lintian -s
	dh_installcron -s
	dh_installinfo -s
	dh_installchangelogs ChangeLog -s
	dh_strip -s
	dh_link -s
	dh_compress -s \
	    $(CURDIR)/debian/rtai-source/usr/src/kernel-patches/diffs/rtai/*
	dh_fixperms -s
	dh_makeshlibs -s
	dh_installdeb -s
	dh_shlibdeps -s
	dh_gencontrol -s
	dh_md5sums -s
	dh_builddeb -s

binary: binary-indep binary-arch


# Prepares the package for distribution.  Intended for the kernel
# maintainer.
kdist: kdist_clean kdist_config kdist_image

# The kdist_configure target is called by make-kpkg modules_config. It
# should configure the module so it is ready for compilation (mostly
# useful for calling configure)
kdist_config: $(STAMPS_DIR)/kdist_config
kdist_configure: $(STAMPS_DIR)/kdist_config

$(STAMPS_DIR)/kdist_config: config.status
ifeq ($(CONFIG_TARGET_IF),gui)
	$(MAKE) -f makefile $(CONFIG_TARGET)
endif
	mkdir -p $(dir $@) && touch $@

# the kdist_image target is called by make-kpkg modules_image. It is
# responsible for compiling the module and creating the package. It
# should also clean up after making the module. Please note we use a
# separate binary-modules target to make testing the package building
# easier
kdist_image:
	$(MAKE) $(MFLAGS) -f debian/rules binary-modules
	$(MAKE) $(MFLAGS) -f debian/rules clean

# the kdist_clean target is called by make-kpkg modules_clean. It is
# responsible for cleaning up any changes that have been made by the
# other kdist_commands (except for the .deb files created).
kdist_clean:
	$(MAKE) $(MFLAGS) -f debian/rules clean

# the binary-modules target prepares the $(pmodules) package.
# It is called by make-kpkg and *not* during a normal build
binary-modules: $(STAMPS_DIR)/kdist_config
	export DH_OPTIONS='-p$(pmodules)'

	# Is this needed for setting up a Depends?
	#echo "kpkg:Package-Version=$(epoch)$(pversion)+$(non_epoch_version)" \
	#	 >> debian/$(package).substvars
	echo "kpkg:Kernel-Version=$(non_epoch_version)" > \
		debian/$(pmodules).substvars

	# The substvars mechanism seems slightly broken, hack to get around it
	# stolen from the qce-ga package. Yaaaa!
	sed -e 's/$${kpkg\:Kernel\-Version}/$(non_epoch_version)/' \
	debian/control.in > debian/control

	dh_testdir
	${ROOT_CMD} dh_testroot
	dh_prep

	# Build the module
	$(MAKE)

	# Install the module
	$(MAKE) install DESTDIR=$(CURDIR)/debian/$(pmodules)

	# don't include files already present in other packages!
	rm -f debian/$(pmodules)/usr/bin/rtai-config
	rm -rf debian/$(pmodules)/usr/lib
	rm -rf debian/$(pmodules)/usr/include
	rm -rf debian/$(pmodules)/usr/rtai-py
	# these *belong* in other packages, but aren't?
	rm -rf debian/$(pmodules)/usr/calibration
	rm -rf debian/$(pmodules)/usr/bin
	rm -rf debian/$(pmodules)/usr/testsuite
	rm -rf debian/$(pmodules)/usr/share/rtai
	rm -rf debian/$(pmodules)/usr/share/doc

	${ROOT_CMD} dh_installdebconf
	${ROOT_CMD} dh_installchangelogs
	${ROOT_CMD} dh_installdocs
	${ROOT_CMD} dh_strip
	${ROOT_CMD} dh_compress
	${ROOT_CMD} dh_fixperms
	${ROOT_CMD} dh_installdeb
	${ROOT_CMD} dh_gencontrol -- -v$(epoch)$(pversion)+$(KDREV)
	${ROOT_CMD} dh_md5sums
	${ROOT_CMD} dh_builddeb --destdir=$(KPKG_DEST_DIR)





.PHONY: build clean binary-indep binary-arch binary install binary-modules kdist kdist_config kdist_image kdist_clean
